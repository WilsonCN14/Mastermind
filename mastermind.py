# Name: Christina Wilson
# Due Date: 3/8/2021
# Assignment: Portfolio Project: Mastermind Puzzle
# Description: Mastermind allows the user to play the Mastermind Puzzle using the command line or watch the computer solve the Mastermind Puzzle.
# Citation: The code the computer uses to solve the puzzle is based on Donald Knuth's algorithm. Wikipedia has a description of his algorithm. https://en.wikipedia.org/wiki/Mastermind_(board_game) 


import random

class Mastermind():
    ''' Mastermind is a puzzle game where the player has eight guesses to guess the color and position of four pegs randomly generated by the computer. The Mastermind class contains the functions for the game that the MastermindApp class uses to play the game on a app. '''

    def __init__(self):
        pass

    def menu(self):
        ''' Allows the user to choose to play the game, watch the computer play the game, or read the rules. '''
        
        while True:
            menu_choice = input("Type p to play the game, c to watch the computer play the game, or s to shut down the program: ")

            if menu_choice == 'p':
                self.play_game()
                break
            elif menu_choice == 'c':
                self.computer_play_game()
                break
            elif menu_choice == 's':
                break
            else:
                print("Sorry, that is not a menu option.")
                continue
            
    def play_game(self):
        ''' Allows the user to play the game. '''

        # Instructions
        print("\n#####################################################################\n")
        print("How to Play: \n")
        print("The computer has randomly arranged four pegs from left to right. \n")
        print("You have 8 guesses to guess the color of each peg. The order the pegs are in matters. \n")
        print("For each guess, you will be asked the color of each peg starting from the leftmost peg and going right. \n")
        print("The color options are: red, blue, yellow, green, purple, and orange. \n")
        print("Once you give your guess to all four pegs, the computer responds by showing you a black peg for each peg in the correct color and position and a white peg for each peg only in the correct color but not the correct position. \n")
        print("#####################################################################\n")
        print("Color options: red, blue, yellow, green, purple, orange\n")

        # Computer randomly arranges four pegs
        answer = []  # Answer to puzzle is a list of four colors (order matters)
        colors = ['red', 'blue', 'yellow', 'green', 'purple', 'orange']  # Color options for each peg
        win = False

        for i in range(0, 4):
            answer.append(random.choice(colors))

        # Player has 8 guesses to guess the arrangement
        for i in range(0, 8):
            print(f"Guess {i + 1} out of 8:")

            current_guess = []
            
            for j in range(0, 4):
                while True:
                    guess = input(f"What is the color of Peg {j + 1}: ")

                    if guess == 'red':
                        current_guess.append('red')
                        break
                    elif guess == 'blue':
                        current_guess.append('blue')
                        break
                    elif guess == 'yellow':
                        current_guess.append('yellow')
                        break
                    elif guess == 'green':
                        current_guess.append('green')
                        break
                    elif guess == 'purple':
                        current_guess.append('purple')
                        break
                    elif guess == 'orange':
                        current_guess.append('orange')
                        break
                    else:
                        print("That is not one of the color options.")
                        print("Please type red, blue, yellow, green, purple, or orange. \n")
                        continue
            
            # Verify guess
            response = self.verification(answer, current_guess)
            black = response[0]
            white = response[1]

            if black == 4:
                print("\nCongratulations! You win! \n")
                win = True
                break
            else:
                print(f"Black pegs: {black}")
                print(f"White pegs: {white} \n")

        # After 8 failed guesses, player loses
        if win == False:
            print("You have used up all your guesses!")
            print("Sorry, you lose.")
            print(f"The answer was, in order, {answer}.\n")

        # After playing, go back to menu
        print("Do you want to play again?")
        self.menu()

    def computer_play_game(self):
        ''' Watch the computer play the game. This code is based on Donald Knuth's algorithm.'''
        
        print("\nYou are now watching the computer play the game. \n")

        # Four pegs are randomly arranged
        answer = []  
        colors = ['red', 'blue', 'yellow', 'green', 'purple', 'orange']  

        for i in range(0, 4):
            answer.append(random.choice(colors))

        # Due to having four pegs and six colors, there are 1296 possible combinations the answer could be
        possible_answers = []  # Holds tuples containing possible answers
        unused_guesses = []  # Holds tuples containing guesses we have not made yet

        for i in range(0, 6):
            for j in range(0, 6):
                for k in range(0, 6):
                    for l in range(0,6):
                        possible_answers.append((colors[i], colors[j], colors[k], colors[l]))
                        unused_guesses.append((colors[i], colors[j], colors[k], colors[l]))


        current_guess = ('red', 'red', 'blue', 'blue')  # First guess is always the same
        possible_answers.remove(current_guess)
        unused_guesses.remove(current_guess)

        # Computer plays until it arrives at correct answer
        win = False
        guesses = 0

        while win == False:
            print(f"Guess {guesses + 1}:")
            print(f"Computer guessed: {current_guess}")
            guesses += 1

            # Verify guess
            response = self.verification(answer, current_guess)
            black = response[0]
            white = response[1]

            if black == 4:
                print("\nThe computer found the correct answer!")
                print(f"The correct answer is {answer}.")
                print(f"It took the computer {guesses} guesses to find the answer.\n")
                win = True
            else:
                print(f"Black pegs: {black}")
                print(f"White pegs: {white} \n")

            # Remove all codes from possible_answers that would not give the same response if current_guess were the actual solution to puzzle
            possible_answers_copy = possible_answers  # Make a copy so we can iterate over copy while removing answers from original list

            for code in possible_answers_copy:
                response = self.verification(current_guess, code)

                if [black, white] != response:
                    possible_answers.remove(code)

            # Determine the next guess by picking the guess that will eliminate the most codes from possible_answers
            num_eliminated = {}  # Tracks the minimum number of codes eliminated with each guess

            for guess in unused_guesses:

                # Pretending guess is the correct answer, determine the black and white peg results each code in possible_answers would have
                results = {(0, 0): 0, (0, 1): 0, (0, 2): 0, (0, 3): 0, (0, 4): 0, (1, 0): 0, (1, 1): 0, (1, 2): 0, (1, 3): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (4, 0): 0}  # Each entry is (black, white): number of codes with this result

                for code in possible_answers:
                    response = self.verification(guess, code)
                    results[(response[0], response[1])] += 1

                highest = max(list(results.values()))

                min_eliminated = len(possible_answers) - highest  # This is the minimum number of answers that can be eliminated with this guess
                num_eliminated[guess] = min_eliminated

            options = []  # Options for next guess
            options_in_possible_answers = []  # Options for next guess that are also possible answers

            max_eliminated = max(list(num_eliminated.values()))

            for i in num_eliminated:
                if num_eliminated[i] == max_eliminated:
                    options.append(i)

                    if i in possible_answers:
                        options_in_possible_answers.append(i)

            if len(options_in_possible_answers) > 0:
                current_guess = options_in_possible_answers[0]
                possible_answers.remove(current_guess)
            else:
                current_guess = options[0]
                unused_guesses.remove(current_guess)

        # After computer finishes game, go back to menu
        self.menu()

    def verification(self, answer, current_guess):
        ''' Computer verifies guess and responds back with a number of black pegs and a number of white pegs that the player can use to make their next guess (if black == 4, the player solved the puzzle). '''

        total = 0  # Number of correct color pegs (black + white)
        black = 0  # Number of correct color and correct position pegs
        white = 0  # Number of correct color but wrong position pegs

        # Count number of each color in answer and current_guess
        answer_colors = {'red': 0, 'blue': 0, 'yellow': 0, 'green': 0, 'purple': 0, 'orange': 0}
        current_guess_colors = {'red': 0, 'blue': 0, 'yellow': 0, 'green': 0, 'purple': 0, 'orange': 0}

        for i in range(0, 4):
            answer_colors[answer[i]] += 1
            current_guess_colors[current_guess[i]] += 1

        # Calculate total number of same color pegs 
        for i in answer_colors:
            if answer_colors[i] >= current_guess_colors[i]:
                total += current_guess_colors[i]
            else:
                total += answer_colors[i]

        # Calculate number of black pegs
        for i in range(0, 4):
            if answer[i] == current_guess[i]:
                black += 1

        # Calculate white pegs
        white = total - black

        # Return results of verification
        return [black, white]
    

def main():
    game = Mastermind()
    print("Welcome to Mastermind! \n")
    print("You can play the Mastermind game yourself or watch the computer play Mastermind. \n")
    game.menu()

if __name__ == '__main__':
    main()